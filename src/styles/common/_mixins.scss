/******************************************************************************
 * Copyright 2020-2020 Exactpro (Exactpro Systems Limited)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
@import './colors.scss';

@mixin ellipsis {
	text-overflow: ellipsis;
	overflow: hidden;
	white-space: nowrap;
}

@mixin scrollbar {
	&::-webkit-scrollbar {
		background-color: rgba(0, 0, 0, 0);
		width: 6px;
		height: 6px;
	}

	&::-webkit-scrollbar-track {
		background-color: $scrollbarTrackBackground;
		border-radius: 40px;
	}

	&::-webkit-scrollbar-thumb {
		background-color: $scrollbarThumbBackground;
		border-radius: 40px;
		height: 40px;
	}

	&::-webkit-scrollbar-button {
		display: none;
	}
}

@mixin hidden-scrollbar {
	&::-webkit-scrollbar {
		width: 0px;
		height: 0;
		background: transparent;
	}
	// IE
	-ms-overflow-style: none;
	// for FF
	scrollbar-width: none;
}

@mixin status-card {
	--status-primary-color: #{$primaryTextColor};
	--status-primary-color-light: #{$primaryTextColorLight};
	--status-secondary-color: #{$secondaryTextColor};
	--status-primary-border-color: #{$defaultCardBorderColor};
	--status-secondary-border-color: #{$defaultCardBackground};
	--status-hover-border-color: #{$defaultCardBorderColor};
	--status-primary-background-color: #{$defaultCardBorderColor};
	--status-primary-delimeter-color: #{$defaultCardBackground};
	--status-secondary-background-color: #{$defaultSelectedCardBackground};
	--status-primary-header-background-color: #{$defaultCardBorderColor};
	--status-secondary-header-background-color: #{$defaultSelectedCardBackground};
	--status-icon-color: #{$secondaryTextColor};
	--status-icon-color-light: #{$secondaryLightTextColor};
	--status-icon-color-active: #{$primaryTextColor};

	&.passed {
		// we can't symply assign scss variable to css variable because sass doesn't know css varible type,
		// so we use #{ ... } syntax to tell sass that we use variable as color
		// https://github.com/sass/libsass/issues/2621
		--status-primary-color: #{$passedTextColor};
		--status-primary-color-light: #{$passedTextColorLight};
		--status-secondary-color: #{$passedSecondaryTextColor};
		--status-primary-border-color: #{$passedBorderColor};
		--status-secondary-border-color: #{$passedBorderColorSecondary};
		--status-hover-border-color: #{$passedBorderHoverColor};
		--status-primary-delimeter-color: #{$passedDelimiterHoverColor};
		--status-primary-background-color: #{$passedBorderColor};
		--status-secondary-background-color: #{$passedBackgroundColor};
		--status-primary-header-background-color: #{$passedHeaderColor};
		--status-secondary-header-background-color: #{$passedHeaderSecondaryBackground};
		--status-icon-color: #{$passedIconColor};
		--status-icon-color-light: #{$passedIconColorLight};
		--status-icon-color-active: #{$passedIconColorActive};
	}

	&.failed {
		--status-primary-color: #{$failedTextColor};
		--status-primary-color-light: #{$failedTextColorLight};
		--status-secondary-color: #{$failedSecondaryTextColor};
		--status-primary-border-color: #{$failedBorderColor};
		--status-secondary-border-color: #{$failedBorderColorSecondary};
		--status-hover-border-color: #{$failedBorderHoverColor};
		--status-primary-delimeter-color: #{$failedDelimiterHoverColor};
		--status-primary-background-color: #{$failedBorderColor};
		--status-secondary-background-color: #{$failedBackgroundColor};
		--status-primary-header-background-color: #{$failedHeaderColor};
		--status-secondary-header-background-color: #{$failedHeaderSecondaryBackground};
		--status-header-border-color: #{$failedHeaderBorderColor};
		--status-icon-color: #{$failedIconColor};
		--status-icon-color-light: #{$failedIconColorLight};
		--status-icon-color-active: #{$failedIconColorActive};
	}
}

@mixin status-text {
	&.passed {
		color: $passedTextColor;
	}

	&.failed {
		color: $failedTextColor;
	}

	&.na {
		color: $naTextColor;
	}
}

@mixin selectable-card {
	&.selected {
		border-color: $defaultCardBorderColor;
		background-color: $defaultSelectedCardBackground;
	}

	&.passed {
		background-color: $passedBackgroundColor;
		border-color: $passedBorderColor;
	}

	&.failed {
		background-color: $failedBackgroundColor;
		border-color: $failedBorderColor;
	}
}

@mixin unselectable {
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}

@mixin disable-appearance {
	-webkit-appearance: none;
	-khtml-appearance: none;
	-moz-appearance: none;
	user-select: none;
}

@mixin visually-hidden {
	position: absolute;
	overflow: hidden;
	clip: rect(1px, 1px, 1px, 1px);
	width: 1px;
	height: 1px;
	margin: -1px;
	padding: 0;
	clip-path: inset(50%);
}

@mixin default-table {
	table {
		border-collapse: collapse;
		border-style: hidden;
		table-layout: fixed;
		border-radius: 4px;
		display: grid;
		min-width: 100%;
		grid-auto-rows: minmax(24px, auto);
	}

	th,
	td {
		@include ellipsis();
		font-size: 11px;
		line-height: 16px;
		padding-top: 0;
		padding-bottom: 0;
		box-sizing: border-box;
		border-bottom: 1px solid $tableCellBorderColor;
	}

	thead,
	tbody,
	tr {
		display: contents;
	}

	td {
		word-break: break-all;
		white-space: pre-wrap;
		background-color: $tableBodyBackground;
		border-right: 0;
		border-left: 0;
		display: flex;
		align-items: center;

		&.transparent {
			background-color: transparent;
			border-color: transparent;
		}
	}

	th {
		font-weight: bold;
		line-height: 16px;
		color: white;
		background-color: $tableHeaderBackground;
		padding: 4px;

		&.transparent {
			background-color: transparent;
			border-color: transparent;
		}

		&:first-child {
			border-radius: 4px 0 0 0;
		}

		&:last-child {
			border-radius: 0 4px 0 0;
		}
	}

	td,
	th {
		&:first-child {
			padding-left: 10px;
		}
	}

	tr {
		&:hover td {
			background-color: darken($color: $tableBodyBackground, $amount: 10);

			&.transparent {
				background-color: transparent;
			}
		}
	}
}

@mixin spinner(
	$thikness,
	$size: 16px,
	$duration: 1s,
	$outer-color: $spinnerOuterColor,
	$inner-color: $spinnerInnerColor
) {
	height: $size;
	width: $size;
	border: $thikness solid $outer-color;
	border-top: $thikness solid $inner-color;
	border-radius: 50%;
	animation: spin $duration linear infinite;
}

@keyframes spin {
	0% {
		transform: rotate(0deg);
	}

	100% {
		transform: rotate(360deg);
	}
}

@mixin clickable {
	cursor: pointer;
	border-radius: 2px;

	&:hover {
		background-color: $clickableHoverBackground;
	}
}

@mixin improved-clickable($bgc, $rad: 2px, $amount: 2) {
	cursor: pointer;
	border-radius: $rad;
	background-color: $bgc;

	&:hover {
		background-color: darken($color: $bgc, $amount: $amount);
	}
}

@mixin icon($image, $height: 16px, $width: 16px, $bgsz: 100%) {
	height: $height;
	width: $width;

	background: {
		image: $image;
		repeat: no-repeat;
		size: $bgsz;
		position: center;
	}
}

@mixin round-button($image, $size: 20px) {
	@include clickable;
	@include icon($image, $size, $size);

	border-radius: 50%;
}

@mixin skeleton {
	height: $defaultSkeletonElementHigh;
	background-color: $skeletonBackgroundColor;
	border-radius: $defaultSkeletonElementBorderRadius;
}

@mixin skeleton-pulse {
	animation: pulse 1.7s ease-in-out infinite;
	@keyframes pulse {
		0% {
			opacity: 1;
		}
		50% {
			opacity: 0.4;
		}
		100% {
			opacity: 1;
		}
	}
}

@mixin card-shadow() {
	box-shadow: 4px 8px 6px 0 rgba(0, 0, 0, 0.4);
}

@mixin message-background() {
	background-color: $workspaceBackground;
	white-space: pre-wrap;
	padding: 6px 10px;
}

@mixin bookmark-button($showOnHoverOverParent: false) {
	& .bookmark-button {
		@if $showOnHoverOverParent {
			display: none;
		}

		cursor: pointer;
		width: 15px;
		height: 15px;
		flex-shrink: 0;
		background: url(../../resources/icons/bookmark-add.svg);

		&.pinned {
			display: inline-block;
			background: url(../../resources/icons/bookmark-added.svg);
		}
	}

	&:hover .bookmark-button {
		display: inline-block;
		background: url(../../resources/icons/bookmark-add-hover.svg);

		&.pinned {
			background: url(../../resources/icons/bookmark-added-hover.svg);
		}
	}
}

@mixin event-status-icon($isParentHoverable: false) {
	@if $isParentHoverable {
		&:hover .event-status-icon {
			border-color: var(--status-icon-color);
			background-color: var(--status-icon-color);
		}
	}

	& .event-status-icon {
		flex-shrink: 0;
		width: 9px;
		height: 9px;
		border-radius: 50%;
		background-color: var(--status-icon-color-light);

		&.selected {
			border-color: var(--status-icon-color);
			background-color: var(--status-icon-color);
		}

		&.active {
			box-shadow: 0 0 0 2px white;
			background-color: var(--status-icon-color-active);
		}
	}
}
